<?php

/**
 * @file
 * Pull updates from Salesforce when a Salesforce object is updated.
 */

use \Drupal\salesforce\SelectQuery;
use \Drupal\salesforce\RestClient;

/**
 * Implements hook_cron().
 */
function salesforce_pull_cron() {
  $sfapi = salesforce_get_api();
  if ($sfapi->isAuthorized()) {
    salesforce_pull_get_updated_records($sfapi);
    salesforce_pull_process_deleted_records($sfapi);
  }
}

/**
 * Pull updated records from Salesforce and place them in the queue.
 *
 * Executes a SOQL query based on defined mappings, loops through the results,
 * and places each updated SF object into the queue for later processing.
 */
function salesforce_pull_get_updated_records(RestClient $sfapi) {
  // @TODO: Refactor all this.
  //return;
  $queue = \Drupal::queue('cron_salesforce_pull');

  // Avoid overloading the processing queue and pass this time around if it's
  // over a configurable limit.
  if ($queue->numberOfItems() > \Drupal::state()->get('salesforce_pull_max_queue_size', 100000)) {
    return;
  }

  // Grab all mapping and sort them by $mapping->salesforce_object_type.
  $mappings = salesforce_mapping_load_multiple();
  usort(
    $mappings,
    function($a, $b) {
      return strcmp($a->get('salesforce_object_type'), $b->get('salesforce_object_type'));
    });

  // Iterate over each field mapping to determine our query parameters.
  $last_sf_type = '';
  foreach ($mappings as $mapping) {
    if ($mapping->get('salesforce_object_type') != $last_sf_type) {
      // There are no field mappings configured to pull data from Salesforce so
      // move on to the next mapped object. Prevents querying unmapped data.
      if ($last_sf_type != '' && !empty($mapped_fields)) {
        $results = _salesforce_pull_do_sfo_query($mapped_fields, $mapped_record_types, $last_sf_type, $sfapi);

        if (!isset($results['errorCode'])) {
          // Write items to the queue.
          foreach ($results['records'] as $result) {
            $queue->createItem($result);
          }

          _salesforce_pull_handle_large_requests($results, $sfapi);

          \Drupal::state()->set('salesforce_pull_last_sync_' . $type, REQUEST_TIME);
        }
        else {
          \Drupal::logger('Salesforce Pull')->error('%code:%msg', [
            '%code' => $results['errorCode'],
            '%msg' => $results['message'],
          ]);
        }
      }
      $mapped_fields = [];
      $mapped_record_types = [];
    }
    foreach ($mapping->getFieldMappings() as $field_map) {
      // Exclude field mappings that are only drupal to SF.
      if (in_array($field_map->get('direction'), [SALESFORCE_MAPPING_DIRECTION_SYNC, SALESFORCE_MAPPING_DIRECTION_SF_DRUPAL])) {
        $sf_field = $field_map->get('salesforce_field');
        // Some field map types (Relation) store a collection of SF objects.
        // @TODO: revisit this
        if (is_array($sf_field) && !isset($sf_field['name'])) {
          foreach ($sf_field as $sf_subfield) {
            $mapped_fields[$sf_subfield['name']] = $sf_subfield['name'];
          }
        }
        // The rest of are just a name/value pair.
        else {
          $mapped_fields[$sf_field] = $sf_field;
        }
      }
    }
    $sf_record_type = $mapping->get('salesforce_record_type');
    if (
      !empty($mapped_fields)
      && !empty($sf_record_type)
      && $sf_record_type != SALESFORCE_MAPPING_DEFAULT_RECORD_TYPE
    ) {
      $mapped_record_types[$sf_record_type] = $sf_record_type;
      // Add the RecordTypeId field so we can use it when processing the
      // queued SF objects.
      $mapped_fields['RecordTypeId'] = 'RecordTypeId';
    }
    $last_sf_type = $mapping->get('salesforce_object_type');
  }
}

function _salesforce_pull_do_sfo_query(array $mapped_fields, array $mapped_record_type, $type, RestClient $sfapi) {
  // @TODO figure out the new way to build the query.
  $soql = new SelectQuery($type);
  // Convert field mappings to SOQL.
  $soql->fields = ['Id', 'LastModifiedDate'];
  foreach ($mapped_fields as $field) {
    // Don't add the Id field to the SOQL query.
    if ($field == 'Id') {
      continue;
    }
    $soql->fields[] = $field;
  }

  // If no lastupdate, get all records, else get records since last pull.
  $sf_last_sync = \Drupal::state()->get('salesforce_pull_last_sync_' . $type, NULL);
  if ($sf_last_sync) {
    $last_sync = gmdate('Y-m-d\TH:i:s\Z', $sf_last_sync);
    $soql->addCondition('LastModifiedDate', $last_sync, '>');
  }

  // If Record Type is specified, restrict query.
  if (count($mapped_record_types) > 0) {
    $soql->addCondition('RecordTypeId', $mapped_record_types, 'IN');
  }

  // Execute query.
  return $sfapi->query($soql);
}
/**
 * Handle requests larger than the batch limit (usually 2000).
 */
function _salesforce_pull_handle_large_requests(array $results, RestClient $sfapi) {
  $version_path = parse_url($sfapi->getApiEndPoint(), PHP_URL_PATH);
  $next_records_url = isset($results['nextRecordsUrl']) ?
    str_replace($version_path, '', $results['nextRecordsUrl']) :
    FALSE;
  while ($next_records_url) {
    $new_result = $sfapi->apiCall($next_records_url);
    if (!isset($new_result['errorCode'])) {
      // Write items to the queue.
      foreach ($new_result['records'] as $result) {
        $queue->createItem($result);
      }
    }
    $next_records_url = isset($new_result['nextRecordsUrl']) ?
      str_replace($version_path, '', $new_result['nextRecordsUrl']) : FALSE;
  }
}

/**
 * Process deleted records from salesforce.
 */
function salesforce_pull_process_deleted_records(RestClient $sfapi) {
  // @TODO Add back in SOAP, and use autoloading techniques
  /*
  if (!\Drupal::moduleHandler()->moduleExists('salesforce_soap')) {
    salesforce_set_message('Enable Salesforce SOAP to process deleted records');
    return;
  }
  module_load_include('inc', 'salesforce_soap');
  $soap = new SalesforceSoapPartner($sfapi);
  */
  foreach (array_reverse(salesforce_mapping_get_mapped_objects()) as $type) {
    $last_delete_sync = \Drupal::state()->get('salesforce_pull_delete_last_' . $type, REQUEST_TIME);
    $now = time();
    // SOAP getDeleted() restraint: startDate must be at least one minute
    // greater than endDate.
    $now = $now > $last_delete_sync + 60 ? $now : $now + 60;
    $last_delete_sync_sf = gmdate('Y-m-d\TH:i:s\Z', $last_delete_sync);
    $now_sf = gmdate('Y-m-d\TH:i:s\Z', $now);
    //$deleted = $soap->getDeleted($type, $last_delete_sync_sf, $now_sf);
    $deleted = $sfapi->apiCall(
      "sobjects/$type/deleted/?start=$last_delete_sync_sf&end=$now_sf",
      [],
      'GET'
    );
    // Cast $deleted as object since REST is returning an array instead of
    // the object the SOAP client apparantly does
    $deleted = (object) $deleted;

    if (!empty($deleted->deletedRecords)) {
      $sf_mappings = salesforce_mapping_load_multiple(
        ['salesforce_object_type' => $type]
      );
      foreach ($deleted->deletedRecords as $record) {
        $mapped_object = salesforce_mapped_object_load_by_sfid($record['id']);
        if ($mapped_object) {
          $entity = \Drupal::entityTypeManager()
            ->getStorage($mapped_object->entity_type)
            ->load($mapped_object->entity_id);
          foreach ($sf_mappings as $sf_mapping) {
            if ($sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_DELETE) {
              // Delete mapping object.
              $transaction = db_transaction();
              $map_entity = \Drupal::entityTypeManager()
                ->getStorage('salesforce_mapped_object')
                ->load($mapped_object->salesforce_mapped_object_id);
              $map_entity->delete();
              $map_entity = \Drupal::entityTypeManager()
                ->getStorage($sf_mapping->drupal_entity_type)
                ->load($mapped_object->entity_id);
              $map_entity->delete();

              \Drupal::logger('Salesforce Pull')->notice(
                'Deleted entity %label with ID: %id associated with Salesforce Object ID: %sfid',
                [
                  '%label' => $entity->label(),
                  '%id' => $mapped_object->entity_id,
                  '%sfid' => $record->id,
                ]
              );
            }
          }
          $mapped_object->delete();
        }
      }
    }
    \Drupal::state()->set('salesforce_pull_delete_last_' . $type, REQUEST_TIME);
  }
}
