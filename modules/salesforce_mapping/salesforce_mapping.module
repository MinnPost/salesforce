<?php

/**
 * @file
 * Manages Salesforce object and Drupal entity mappings.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
// Not sure if we'll actually need these, since entity API seems to provide everything:
use Drupal\salesforce_mapping\Entity\SalesforceMapping;
use Drupal\salesforce_mapping\Entity\MappedObject;

/**
 * Implements hook_entity_type_alter().
 */
function salesforce_mapping_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type_id => $entity_type) {
    if ($entity_type->hasViewBuilderClass() && $entity_type->hasLinkTemplate('canonical')) {
      $entity_type->setLinkTemplate('salesforce', "/$entity_type_id/{{$entity_type_id}}/salesforce");
      $entity_type->setLinkTemplate('salesforce_edit', "/$entity_type_id/{{$entity_type_id}}/salesforce/edit");
      $entity_type->setLinkTemplate('salesforce_delete', "/$entity_type_id/{{$entity_type_id}}/salesforce/delete");
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function salesforce_mapping_entity_operation(EntityInterface $entity) {
  $operations = array();
  if (\Drupal::currentUser()->hasPermission('administer salesforce')) {
    if ($entity->hasLinkTemplate('salesforce')) {
      $operations['salesforce'] = array(
        'title' => t('Salesforce'),
        'weight' => 200,
        'url' => $entity->toUrl('salesforce'),
      );
    }
  }
  return $operations;
}


/**
 * Bit flags defining when a data sync should take place for a given mapping.
 */
define('SALESFORCE_MAPPING_SYNC_OFF', 0x0000);
define('SALESFORCE_MAPPING_SYNC_DRUPAL_CREATE', 'push_create');
define('SALESFORCE_MAPPING_SYNC_DRUPAL_UPDATE', 'push_update');
define('SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE', 'push_delete');
define('SALESFORCE_MAPPING_SYNC_SF_CREATE', 'pull_create');
define('SALESFORCE_MAPPING_SYNC_SF_UPDATE', 'pull_update');
define('SALESFORCE_MAPPING_SYNC_SF_DELETE', 'pull_delete');

/**
 * Field mapping direction constants.
 */
define('SALESFORCE_MAPPING_DIRECTION_DRUPAL_SF', 'drupal_sf');
define('SALESFORCE_MAPPING_DIRECTION_SF_DRUPAL', 'sf_drupal');
define('SALESFORCE_MAPPING_DIRECTION_SYNC', 'sync');

/**
 * Field mapping Master or no record type (default) constant.
 */
define('SALESFORCE_MAPPING_DEFAULT_RECORD_TYPE', 'default');

/**
 * Delimiter used in Salesforce multipicklists.
 */
define('SALESFORCE_MAPPING_ARRAY_DELIMITER', ';');

/**
 * Field mapping maximum name length.
 */

define('SALESFORCE_MAPPING_NAME_LENGTH', 128);

/**
 * Loads a single salesforce_mapping or all of them if no name provided.
 *
 * @param string $name (optional)
 *   Name of the map to load, or NULL to load all
 * @param bool $reset (optional)
 *   Whether to reset the sf mapping storage controller cache. N/A if $name is
 *   not provided. If a caller needs to reset the *entire* cache, they should do
 *   so explicitly.
 *
 * @return array | SalesforceMapping
 *   The requested mapping or an array of all mappings, indexed by id, if $name
 *   was not specified
 */
function salesforce_mapping_load($name = NULL) {
  return;
  if ($name) {
    return MappedObject::load($name);
  }
  return MappedObject::loadMultiple();
}

/**
 * Loads multiple salesforce_mappings based on a set of matching conditions.
 *
 * @param array $properties (optional)
 *   An array of properties on the {salesforce_mapping} table in the form
 *     'field' => $value.
 *   If $properties is empty, return an all mappings.
 *
 * Note, entity_load_multiple_by_properties() does not provide a reset
 * parameter, and neither do we. If clearing the entire salesforce mapping cache
 * is necessary, it should be done explicitly by the caller.
 *
 * @return array
 *   An array of SalesforceMapping objects,
 *   indexed by id
 */
function salesforce_mapping_load_multiple($properties = array()) {
  return;
  if (empty($properties)) {
    return MappedObject::loadMultiple();
  }
  return MappedObject::loadByProperties($properties);
}

/**
 * Loads salesforce_mappings based on entity type.
 *
 * @param string (optional)
 *   If provided, a single entity type by which to load salesforce_mapping
 *   objects. If empty, return all salesforce mappings, by entity type.
 *
 * @param bool $reset (optional)
 *   Whether to reset the drupal_static cache for this function. If a caller
 *   needs to reset the entire salesforce_mapping storage controller cache, they
 *   must do so explicitly.
 *
 * @return array
 *   An array of SalesforceMapping objects for the given entity_type, or an
 *   array of all SalesforceMapping objects indexed by entity_type, or an
 *   empty array if no maps were found.
 */
function salesforce_mapping_load_by_drupal($entity_type = null, $reset = FALSE) {
  return;
  // Use a local static cache since this is not a pass-thru function.
  if ($reset) {
    drupal_static_reset(__FUNCTION__);
  }
  $return = &drupal_static(__FUNCTION__);
  if (!isset($return)) {
    // Just load all the maps and build the static cache all at once. Maps are
    // configuration, which means callers should expect all of them may be
    // loaded on any given pageload.
    $maps = salesforce_mapping_load_multiple();
    $return = array();
    foreach ($maps as $map) {
      $type = $map->get('drupal_entity_type');
      if (!isset($return[$type])) {
        $return[$type] = array();
      }
      $return[$type][$map->id()] = $map;
    }
  }
  // Use if/else instead of ternary operator to avoid PHP undefined index notice
  if ($entity_type) {
    return isset($return[$entity_type]) ? $return[$entity_type] : array();
  }
  return $return;
}

/**
 * Returns Salesforce object mappings for given Drupal entity properties.
 *
 * @param string $entity_type
 *   Type of entity to load.
 * @param int $entity_id
 *   Unique identifier of the target entity to load.
 * @param bool $all (optional)
 *   If TRUE, return all object mappings if more than one. Otherwise, return 
 *   only the first. Default FALSE.
 *
 * @return bool | array | salesforce_mapped_object 
 *   The requested salesforce_mapped_object, or array of
 *   salesforce_mapped_objects, or FALSE if none was found.
 * @see MappedObject
 */
function salesforce_mapped_object_load_by_drupal($entity_type, $entity_id, $all = FALSE) {
  // @TODO expose D8-ified "load mapped object by drupal property"
  return;
  $properties = array(
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
  );
  $results = entity_load_multiple_by_properties('salesforce_mapped_object', $properties);
  if (empty($results)) {
    return FALSE;
  }
  return $all ? $results : reset($results);
}

/**
 * Returns Salesforce object mappings for a given Drupal entity.
 *
 * @param string $entity
 *   The entity for which to load object mappings
 * @param bool $all (optional)
 *   If TRUE, return all object mappings if more than one. Otherwise, return 
 *   only the first. Default FALSE.
 *
 * @return bool | array | salesforce_mapped_object 
 *   The requested salesforce_mapped_object, or array of
 *   salesforce_mapped_objects, or FALSE if none was found.
 * @see MappedObject
 */
function salesforce_mapped_object_load_by_entity($entity, $all = FALSE) {
  // @TODO this is broken
  return;
  $properties = array(
    'entity_id' => $entity->id(),
    'entity_type' => get_class($entity),
  );
  $results = entity_load_multiple_by_properties('salesforce_mapped_object', $properties);
  if (empty($results)) {
    return FALSE;
  }
  return $all ? $results : reset($results);
}

/**
 * Return Salesforce object mappings for a given Salesforce object.
 *
 * @param string $salesforce_id
 *   Unique Id provided by Salesforce for the Salesforce record.
 *
 * @see salesforce_mapping_load() for notes about $reset param being removed.
 *
 * @return array
 *   Entities that match the given $salesforce_id.
 */
function salesforce_mapped_object_load_by_sfid($salesforce_id) {
  $conditions = array('salesforce_id' => $salesforce_id);
  $results = entity_load_multiple_by_properties('salesforce_mapped_object', $conditions);
  return !empty($results) ? reset($results) : FALSE;
}

/**
 * Return a unique list of mapped Salesforce object types.
 *
 * @TODO: add parameter to limit by trigger: http://drupal.org/node/1915668
 */
function salesforce_mapping_get_mapped_objects() {
  $object_types = array();
  $mappings = salesforce_mapping_load();
  usort($mappings, 'salesforce_mapping_sort');
  foreach ($mappings as $mapping) {
    $object_types[$mapping->salesforce_object_type] = $mapping->salesforce_object_type;
  }
  return $object_types;
}

/**
 * Sort mappings by weight.
 */
function salesforce_mapping_sort($mapping_a, $mapping_b) {
  if ($mapping_a->weight == $mapping_b->weight) {
    return 0;
  }
  return ($mapping_a->weight < $mapping_b->weight) ? -1 : 1;
}


/**
 * Implements hook_entity_delete().
 */
function salesforce_mapping_entity_delete(EntityInterface $entity) {
  return;
  // Delete any Salesforce object mappings with this entity.
  $mapped_object = salesforce_mapped_object_load_by_entity($entity);

  // No mapping object for this entity, return.
  if (!$mapped_object) {
    return;
  }

  // Only delete mapping if it won't be handled by the delete trigger in the
  // mapping. We're avoiding the issue of mapping deleting the (the what?).
  $mappings = salesforce_mapping_load_multiple(array(
    'drupal_entity_type' => get_class($entity),
    'drupal_bundle' => $entity->bundle(),
  ));
  if (empty($mappings)) {
    return;
  }

  foreach ($mappings as $mapping) {
    if (!($mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE)) {
      $mapped_object->delete();
      return;
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function salesforce_mapping_entity_load($entities, $entity_type) {
  // just stop doing this for now
  return;
  
  if ($entity_type == 'salesforce_mapping') {
    // Best to avoid infinite recursion...
    return;
  }
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['maps'] = &drupal_static(__FUNCTION__);
  }
  $maps = &$drupal_static_fast['maps'];

  if (empty($maps)) {
    // Since salesforce_mapping_load_by_drupal() loads all the maps anyway, best
    // to load them all here, once, into static cache.
    $maps = salesforce_mapping_load_by_drupal();
  }
  if (!isset($maps[$entity_type])) {
    return;
  }
  foreach ($entities as $entity) {
    $mapping = salesforce_mapped_object_load_by_entity($entity);
    if ($mapping) {
      $entity->salesforce_id = $mapping->salesforce_id;
    }
  }
}

/**
 * Implements hook_permission().
 */
function salesforce_mapping_permission() {
  return array(
    'administer salesforce mapping' => array(
      'title' => t('Administer Salesforce mapping'),
      'description' => t('Administer Salesforce field maps.'),
      'restrict access' => TRUE,
    ),
    'view salesforce mapping' => array(
      'title' => t('View Salesforce mapping'),
      'description' => t('View Salesforce mapping data.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_entity_view().
 */
function salesforce_mapping_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // @TODO there must be a better way now.
  return;
  // Don't bother with any further processing if there are no map for this
  // entity type.
  if (!salesforce_mapping_load_by_drupal(get_class($entity))) {
    return;
  }

  // Render linked Salesforce data when viewing a mapped entity.
  $mapped_object = salesforce_mapped_object_load_by_entity($entity);

  if ($mapped_object && Drupal::currentUser()->hasPermission('view salesforce mapping')) {
    // theme_field() is a overkill to display these two values. Use the
    // #field_type property, or hook_entity_view_alter() to override the theme
    // of this.
    if ($conf = $display->getComponent('salesforce_id')) {
      $build['salesforce_id'] = array(
        '#type' => 'item',
        '#title' => t('Salesforce ID'),
        '#markup' => $mapped_object->getSalesforceLink(),
        '#weight' => $conf['weight'],
        '#field_type' => 'salesforce',
      );
    }
    if ($conf = $display->getComponent('salesforce_last_sync')) {
      $build['salesforce_last_sync'] = array(
        '#type' => 'item',
        '#title' => t('Salesforce last sync'),
        '#markup' => format_date($mapped_object->last_sync->value),
        '#weight' => $conf['weight'],
        '#field_type' => 'salesforce',
      );
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function salesforce_mapping_field_extra_fields() {
  // Include Salesforce data for mapped entities.
  $extra = array();
  $mappings = salesforce_mapping_load_multiple();
  foreach ($mappings as $mapping) {
    $extra[$mapping->drupal_entity_type][$mapping->drupal_bundle] = array(
      'display' => array(
        'salesforce_id' => array(
          'label' => t('Salesforce Id'),
          'description' => t('ID of a linked Salesforce object.'),
          'weight' => 0,
        ),
        'salesforce_last_sync' => array(
          'label' => t('Salesforce last sync'),
          'description' => t('Timestamp for the latest sync with Salesforce.'),
          'weight' => 0,
        ),
      ),
    );
  }
  return $extra;
}

/**
 * Implements hook_entity_update().
 *
 * Ensures drupal entity has an update timestamp.
 */
function salesforce_mapping_entity_update(EntityInterface $entity) {
  // @TODO: update this. it is broked.
  return;
  // Check if mapping exists.

  if (!salesforce_mapping_load_by_drupal(get_class($entity))) {
    return;
  }
  $sf_mapped_object = salesforce_mapped_object_load_by_entity($entity);
  if ($sf_mapped_object) {
    // Triggering the sf mapping's save callback updates its timestamp.
    $sf_mapped_object->entity_updated = $entity->changed;
    $sf_mapped_object->save();
  }
}

/**
 * Get the Salesforce fieldmap types array.
 *
 * @see hook_salesforce_mapping_fieldmap_type()
 * @see hook_salesforce_mapping_fieldmap_type_alter()
 *
 * @param string $fieldmap_type
 *   The fieldmap type, e.g. property, for which the info shall be returned, or
 *   NULL to return an array with info about all types.
 */
function salesforce_mapping_get_fieldmap_types($fieldmap_type = NULL) {
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['salesforce_fieldmap_type'] = & drupal_static(__FUNCTION__);
  }
  $salesforce_fieldmap_type = & $drupal_static_fast['salesforce_fieldmap_type'];

  if (empty($salesforce_fieldmap_type)) {
    if ($cache = cache()->get('salesforce:fieldmap_type')) {
      $salesforce_fieldmap_type = $cache->data;
    }
    else {
      $salesforce_fieldmap_type = module_invoke_all('salesforce_mapping_fieldmap_type');

      // Let other modules alter the fieldmap type.
      drupal_alter('salesforce_fieldmap_type', $salesforce_fieldmap_type);
      cache()->set('salesforce:fieldmap_type', $salesforce_fieldmap_type, CacheBackendInterface::CACHE_PERMANENT, array('salesforce' => TRUE));

    }
  }

  if (empty($fieldmap_type)) {
    return $salesforce_fieldmap_type;
  }
  elseif (isset($salesforce_fieldmap_type[$fieldmap_type])) {
    return $salesforce_fieldmap_type[$fieldmap_type];
  }
}
