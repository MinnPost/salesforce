<?php

/**
 * @file
 * Manages Salesforce object and Drupal entity mappings.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\salesforce\Exception;
// Not sure if we'll actually need these, since entity API seems to provide everything:
use Drupal\salesforce_mapping\Entity\SalesforceMapping;
use Drupal\salesforce_mapping\Entity\MappedObject;
use Drupal\salesforce\EntityNotFoundException;

/**
 * Define when a data sync should take place for a given mapping.
 */
const SALESFORCE_MAPPING_SYNC_DRUPAL_CREATE = 'push_create';
const SALESFORCE_MAPPING_SYNC_DRUPAL_UPDATE = 'push_update';
const SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE = 'push_delete';
const SALESFORCE_MAPPING_SYNC_SF_CREATE = 'pull_create';
const SALESFORCE_MAPPING_SYNC_SF_UPDATE = 'pull_update';
const SALESFORCE_MAPPING_SYNC_SF_DELETE = 'pull_delete';

const SALESFORCE_MAPPING_TRIGGER_MAX_LENGTH = 16;

/**
 * Field mapping direction constants.
 */
const SALESFORCE_MAPPING_DIRECTION_DRUPAL_SF = 'drupal_sf';
const SALESFORCE_MAPPING_DIRECTION_SF_DRUPAL = 'sf_drupal';
const SALESFORCE_MAPPING_DIRECTION_SYNC = 'sync';

/**
 * Delimiter used in Salesforce multipicklists.
 */
const SALESFORCE_MAPPING_ARRAY_DELIMITER =';';

/**
 * Field mapping maximum name length.
 */
const SALESFORCE_MAPPING_NAME_LENGTH = 128;


const SALESFORCE_MAPPING_STATUS_SUCCESS = 1;
const SALESFORCE_MAPPING_STATUS_ERROR = 0;


/**
 * Implements hook_entity_type_alter().
 */
function salesforce_mapping_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type_id => $entity_type) {
    if ($entity_type->hasViewBuilderClass() && $entity_type->hasLinkTemplate('canonical')) {
      $entity_type->setLinkTemplate('salesforce', "/$entity_type_id/{{$entity_type_id}}/salesforce");
      $entity_type->setLinkTemplate('salesforce_edit', "/$entity_type_id/{{$entity_type_id}}/salesforce/edit");
      $entity_type->setLinkTemplate('salesforce_delete', "/$entity_type_id/{{$entity_type_id}}/salesforce/delete");
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function salesforce_mapping_entity_operation(EntityInterface $entity) {
  $operations = [];
  if (\Drupal::currentUser()->hasPermission('administer salesforce')) {
    if ($entity->hasLinkTemplate('salesforce')) {
      $operations['salesforce'] = [
        'title' => t('Salesforce'),
        'weight' => 200,
        'url' => $entity->toUrl('salesforce'),
      ];
    }
  }
  return $operations;
}

/**
 * Return a unique list of mapped Salesforce object types.
 * @see salesforce_mapping_load_multiple()
 * @throws EntityNotFoundException if no mappings have been created yet.
 */
function salesforce_mapping_get_mapped_sobject_types() {
  $object_types = [];
  $mappings = salesforce_mapping_load_multiple();
  foreach ($mappings as $mapping) {
    $type = $mapping->getSalesforceObjectType();
    $object_types[$type] = $type;
  }
  return $object_types;
}

/**
 * Sort mappings by weight.
 */
function salesforce_mapping_sort($mapping_a, $mapping_b) {
  if ($mapping_a->get('weight') == $mapping_b->get('weight')) {
    return 0;
  }
  return ($mapping_a->get('weight') < $mapping_b->get('weight')) ? -1 : 1;
}

/**
 * Implements hook_permission().
 */
function salesforce_mapping_permission() {
  return [
    'administer salesforce mapping' => [
      'title' => t('Administer Salesforce mapping'),
      'description' => t('Administer Salesforce field maps.'),
      'restrict access' => TRUE,
    ],
    'view salesforce mapping' => [
      'title' => t('View Salesforce mapping'),
      'description' => t('View Salesforce mapping data.'),
      'restrict access' => TRUE,
    ],
  ];
}

/**
 * Implements hook_field_extra_fields().
 */
function salesforce_mapping_entity_extra_field_info() {
  // Include Salesforce data for mapped entities.
  // @TODO: these don't actually show up on the entity view. Have to implement hook_entity_view as well?
  $extra = [];
  try {
    $mappings = \Drupal::service('salesforce.salesforce_mapping_storage')
      ->loadMultiple();
  }
  catch (EntityNotFoundException $e) {
    return [];
  }
  foreach ($mappings as $mapping) {
    $extra[$mapping->drupal_entity_type][$mapping->drupal_bundle] = [
      'display' => [
        'salesforce_id' => [
          'label' => t('Salesforce Id'),
          'description' => t('ID of a linked Salesforce object.'),
          'weight' => 0,
        ],
        'salesforce_last_sync' => [
          'label' => t('Salesforce last sync'),
          'description' => t('Timestamp for the latest sync with Salesforce.'),
          'weight' => 0,
        ],
      ],
    ];
  }
  return $extra;
}

/**
 * Implements hook_entity_update().
 *
 * Ensures drupal entity has an update timestamp.
 */
function salesforce_mapping_entity_update(EntityInterface $entity) {
  // Check for mappings (much faster than looking for mapped objects.)
  try {
    \Drupal::service('salesforce.salesforce_mapping_storage')
      ->loadByDrupal($entity->getEntityTypeId());
  }
  catch (\EntityNotFoundException $e) {
    return;
  }

  // If mappings, check for mapped objects.
  try {
    $mapped_objects = \Drupal::service('salesforce.mapped_object_storage')
      ->loadByDrupal($entity->getEntityTypeId(), $entity->id());
  }
  catch (\EntityNotFoundException $e) {
    return;
  }

  foreach ($mapped_objects as $mapped_object) {
    // Resaving the object should update the timestamp.
    // NB: we are purposefully not creating a new revision here.
    $mapped_object
      ->set('entity_updated', REQUEST_TIME)
      ->save();
  }
}
