<?php

/**
 * @file
 * API and module for Salesforce integration testing.
 */

/**
 * Overwrites drupal_http_request() for our tests.
 *
 * @param $url
 * @param array $options
 */
function salesforce_testing_rest_http_test_generate_mocks_function($url, array $options = array()) {
  variable_set('drupal_http_request_function', FALSE);
  $to_return = drupal_http_request($url, $options);

  if (strpos($url, variable_get('salesforce_instance_url')) === 0) {
    $return_values_to_save = new stdClass();
    $return_values_to_save->data = $to_return->data;
    $return_values_to_save->code = $to_return->code;
    $return_values_to_save->status_message = $to_return->status_message;

    $generic_url = _salesforce_testing_clean_up_mocks_values($url);
    $return_values_to_save->original_string = $generic_url;

    $file_to_save = _salesforce_testing_get_mocks_file_path($generic_url);
    if (!file_exists($file_to_save)) {
      $clean_file = _salesforce_testing_clean_up_mocks_values(drupal_json_encode($return_values_to_save));
      file_put_contents($file_to_save, $clean_file);
    }
  }
  variable_set('drupal_http_request_function', __FUNCTION__);
  return $to_return;
}

/**
 * Saves the path of our mocks based on the url.
 *
 * @param $url
 * @return string
 */
function _salesforce_testing_get_mocks_file_path($url) {
  return getcwd() . '/' . drupal_get_path('module', 'salesforce_testing') . '/mocks/' . sha1($url);
}

/**
 * Remove key strings in the files saved for mock purposes.
 *
 * Strings replaces are potentially sensitive but at least inconsistent between
 * installations, so tests need clean values.
 *
 * @param $string
 */
function _salesforce_testing_clean_up_mocks_values($string) {
  $fake_data_strings = _salesforce_testing_get_testing_variables();
  $real_data = array();

  foreach ($fake_data_strings as $variable_name => $fake_value) {
    $real_data[$variable_name] = variable_get($variable_name, '');
  }

  return str_replace($real_data, $fake_data_strings, $string);
}

/**
 * Translates real variable names into fake variables for testing purposes.
 * @return array
 */
function _salesforce_testing_get_testing_variables() {
  return array(
    'salesforce_endpoint' => 'https://fake.salesforce.com',
    'salesforce_instance_url'  => 'https://fake.salesforce.com',
    'salesforce_consumer_key' => 'VERY_LONG_FAKE_CONSUMER_KEY',
    'salesforce_consumer_secret' => '19191919191919191',
    'salesforce_refresh_token' => 'Long.Fake.Refresh.Token.Here',
  );
}
