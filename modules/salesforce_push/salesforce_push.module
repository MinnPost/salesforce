<?php

/**
 * @file
 * Push updates to Salesforce when a Drupal entity is updated.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\entity\EntityInterface;

// @TODO this will be come SalesforcePushInterface, or similar
use Drupal\salesforce_push\Rest;
use Drupal\salesforce_push\RestAsync;


/**
 * Implements hook_entity_insert().
 */
function salesforce_push_entity_insert($entity) {
  salesforce_push_entity_crud($entity, SALESFORCE_MAPPING_SYNC_DRUPAL_CREATE);
}

/**
 * Implements hook_entity_update().
 */
function salesforce_push_entity_update($entity) {
  salesforce_push_entity_crud($entity, SALESFORCE_MAPPING_SYNC_DRUPAL_UPDATE);
}

/**
 * Implements hook_entity_delete().
 */
function salesforce_push_entity_delete($entity) {
  salesforce_push_entity_crud($entity, SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE);
}

/**
 * Push entities to Salesforce.
 *
 * @param object $entity
 *   The entity object.
 * @param int $op
 *   The trigger being responded to. 
 *   One of push_create, push_update, push_delete.
 * @TODO
 *   at some point all these hook_entity_* implementations will go away. We'll
 *   create an event subscriber class to respond to entity events and delegate
 *   actions to the appropriate Push procedures.
 */
function salesforce_push_entity_crud($entity, $op) {
  // @TODO: REFACTOR ALL THIS
  return;
  // @TODO consider asking the entity itself whether it allows push/pull, instead of asking modules. This will give us better readability and granularity. E.g. using a field.
  // @TODO module_implements/module_invoke pattern is deprecated
  // Trigger a hook to allow other modules to prevent this entity/operation from
  // triggering a sync with Salesforce.
  foreach (module_implements('salesforce_push_entity_allowed') as $module) {
    if (module_invoke($module, 'salesforce_push_entity_allowed', $entity, $op) === FALSE) {
      return;
    }
  }

  if (!($mappings = salesforce_mapping_load_by_drupal(get_class($entity)))) {
    return;
  }

  foreach ($mappings as $mapping) {
    // @TODO make sync_triggers human readable or convert them back to hex flags
    if (!isset($mapping->sync_triggers[$op]) || !$mapping->pushPlugin) {
      continue;
    }
    try {
      // SFPush decides what to do with entity values, mapping flags, op, etc:
      // The module layer is only responsible for gathering objects and calling
      // the appropriate methods.
      // @TODO init() is weird, but since the mapping is not attached to the
      // entity (e.g. as a field), we have to feed it somehow. Seems like the plugin should be able to get at the mapping container at least...
      $mapping->pushPlugin->init($entity, $mapping)->$op();
    }
    catch (Exception $e) {
      $vars = array(
        'entity' => $entity,
        'mapping' => $mapping,
        'params' => $params,
        'exception' => $e,
        'op' => 'delete',
      );
      module_invoke_all('salesforce_push_failure', $e->getMessage(), $vars);
    }
  }
}

/**
 * Sync Drupal entities and Salesforce objects using the REST API.
 *
 * @param string $entity_type
 *   Type of Drupal entity.
 * @param object $entity
 *   The entity object.
 * @param object $mapping
 *   Salesforce mapping object.
 * @param int $op
 *   Trigger for this sync.
 * @deprecated use SalesforcePush
 */
function salesforce_push_sync_rest($entity, $mapping, $op) {
  $sfapi = salesforce_get_api();

  // Not authorized, we need to bail this time around.
  if (!$sfapi->isAuthorized()) {
    return;
  }

  list($entity_id) = entity_extract_ids($entity_type, $entity);
  $mapped_objects = salesforce_mapped_object_load_by_drupal($entity_type, $entity_id);

  // Generate parameter array from field mappings.
  $entity_wrapper = entity_metadata_wrapper($entity_type, $entity);
  $params = salesforce_push_map_params($mapping, $entity_wrapper, $key_field, $key_value);

  // Entity is not linked to an SF object.
  if (!$mapped_objects) {
    // Setup SF record type.
    if ($mapping->salesforce_record_type != SALESFORCE_MAPPING_DEFAULT_RECORD_TYPE) {
      if ($mapping->salesforce_object_type != 'CampaignMember') {
        $params['RecordTypeId'] = $mapping->salesforce_record_type;
      }
    }

    $op = '';
    try {
      // An external key has been specified, attempt an upsert().
      if (!empty($key_field)) {
        $op = 'upsert';
        $data = $sfapi->objectUpsert($mapping->salesforce_object_type, $key_field, $key_value, $params);
      }
      // No key or mapping, create a new object in Salesforce.
      else {
        $op = 'create';
        $data = $sfapi->objectCreate($mapping->salesforce_object_type, $params);
      }
    }
    catch(Exception $e) {
      $vars = array(
        'entity_type' => $entity_type,
        'entity' => $entity,
        'mapping' => $mapping,
        'params' => $params,
        'exception' => $e,
        'op' => $op,
      );
      module_invoke_all('salesforce_push_failure', $e->getMessage(), $vars);
      return;
    }

    // Success.
    if (empty($data['errorCode'])) {
      // Create mapping object, saved below.
      $mapped_objects = entity_create('salesforce_mapped_object', array(
        'entity_id' => $entity_id,
        'entity_type' => $entity_type,
        'salesforce_id' => $data['id'],
      ));
    }
    else {
      $message = t('Failed to sync %label with Salesforce. @code: @message', array(
        '%label' => $entity_wrapper->label(),
        '@code' => $data['errorCode'],
        '@message' => $data['message'],
      ));
      $vars = array(
        'entity_type' => $entity_type,
        'entity' => $entity,
        'mapping' => $mapping,
        'params' => $params,
        'response' => $data,
        'op' => $op,
      );
      module_invoke_all('salesforce_push_failure', $message, $vars);
      return;
    }
  }
  // Existing object link, update.
  else {
    // Handle the case of mapped objects last sync being more recent than
    // the entity's timestamp, which is set by salesforce_mapping.
    if ($mapped_objects->last_sync > $mapped_objects->entity_updated) {
      return;
    }

    // Update SF object.
    try {
      $sfapi->objectUpdate($mapping->salesforce_object_type, $mapped_objects->salesforce_id, $params);
    }
    catch(Exception $e) {
      $mapped_objects->delete();
      $vars = array(
        'entity_type' => $entity_type,
        'entity' => $entity,
        'mapping' => $mapping,
        'params' => $params,
        'exception' => $e,
        'op' => 'update',
      );
      module_invoke_all('salesforce_push_failure', $e->getMessage(), $vars);
      return;
    }

    $mapped_objects->last_sync = REQUEST_TIME;
  }

  salesforce_set_message(t('%name has been synchronized with Salesforce record %sfid.', array(
    '%name' => $entity_wrapper->label(),
    '%sfid' => $mapped_objects->salesforce_id,
  )));

  // Note that last_sync time is updated automatically.
  $mapped_objects->save();
}

/**
 * Implements hook_cron().
 */
function salesforce_push_cron() {
  return;

  $sfapi = salesforce_get_api();
  if (!$sfapi->isAuthorized()) {
    return;
  }

  $maps = salesforce_mapping_load_multiple();
  $entity_ids = array();
  // General approach to processing the queue:
  // For each map, sorted by weight
  // -- For each operation, delete, create, then update
  // -- -- Build a list of sf params and send it
  
  $queue = \Drupal::queue('salesforce_push');
  // @TODO SOAP put limit is 200 per op. Why does this default to 50?
  $limit = \Drupal::state()->get('salesforce.push_limit', 50);
  $use_soap = module_exists('salesforce_soap');
  for ($delta = 0; $delta < $limit; $delta++) {
    $item = $queue->claimItem();
    // We do this after the "for()" so that when we reach the limit, we don't
    // incidentally claim a queue license on an item we aren't going to process.
    if (!$item) {
      break;
    }
    $mapping = salesforce_mapping_load($item->data['mapping_id']);

    // Duplicate entity in the queue.
    if ($item->data['entity_type'] == $entity_type && $item->data['entity_id'] == $entity_id) {
      $queue->deleteItem($item);
      continue;
    }

    $entity_type = $item->data['entity_type'];
    $entity_id = $item->data['entity_id'];
    $entity = entity_load($entity_type, $entity_id);
    $mapped_object = salesforce_mapped_object_load_by_entity($entity);
    if ($use_soap) {
      if ($item->data['trigger'] == SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE && $mapped_object) {
        $delete_list[$delta] = $mapped_object->salesforce_id;
      }
      else {
        $wrapper = entity_metadata_wrapper($item->data['entity_type'], $entity);
        $params = salesforce_push_map_params($mapping, $wrapper, $key_field, $key_value);

        $synced_entities[$delta] = array(
          'entity_wrapper' => $wrapper,
          'mapped_objects' => $mapped_object,
        );

        $sobject = new stdClass();
        $sobject->type = $mapping->salesforce_object_type;
        foreach ($params as $key => $value) {
          $sobject->fields[$key] = $value;
        }

        if ($mapped_object && $mapped_object->salesforce_id) {
          $sobject->Id = $mapped_object->salesforce_id;
          $update_list[$delta] = $sobject;
        }
        else {
          if ($key_field && $key_value) {
            $upsert_list[$key_field][$delta] = $sobject;
          }
          else {
            $create_list[$delta] = $sobject;
          }
        }
      }
    }
    else {
      salesforce_push_sync_rest($entity_type, $entity, $mapping, $item->data['trigger']);
    }

    // Remove item from queue.
    $queue->deleteItem($item);
  }

  // Use soap API to batch process records.
  if ($use_soap) {
    module_load_include('inc', 'salesforce_soap');
    $soap = new SalesforceSoapPartner($sfapi);
    if (!empty($delete_list)) {
      $results = $soap->delete($delete_list);
      salesforce_push_process_soap_results('Delete', $results, $synced_entities);
    }

    if (!empty($create_list)) {
      $results = $soap->create($create_list);
      salesforce_push_process_soap_results('Create', $results, $synced_entities);
    }

    if (!empty($update_list)) {
      $results = $soap->update($update_list);
      salesforce_push_process_soap_results('Update', $results, $synced_entities);
    }

    if (!empty($upsert_list)) {
      foreach ($upsert_list as $key => $upsert_item) {
        $results = $soap->upsert($key, $upsert_item);
        salesforce_push_process_soap_results('Upsert', $results, $synced_entities);
      }
    }
  }
}

/**
 * Process SOAP API batch results.
 *
 * Create or update mapped object entities and log results.
 *
 * @param string $op
 *   Operation performed.
 * @param array $results
 *   Array of result objects provided by Salesforce.
 * @param array $synced_entities
 *   Entities that were synced with Salesforce.
 */
function salesforce_push_process_soap_results($op, $results, $synced_entities) {
  foreach ($results as $key => $result) {
    if ($result->success) {
      $mapped_object = $synced_entities[$key]['mapped_objects'];
      if (drupal_strtolower($op) == 'delete' && $mapped_object) {
        $mapped_object->delete();
      }
      else {
        // Create mapping object, saved below.
        $wrapper = $synced_entities[$key]['entity_wrapper'];
        list($entity_id) = entity_extract_ids($wrapper->type(), $wrapper->value());
        $mapped_object = entity_create('salesforce_mapped_object', array(
          'entity_id' => $entity_id,
          'entity_type' => $wrapper->type(),
          'salesforce_id' => $result->id,
        ));
        $mapped_object->save();
      }

      watchdog('salesforce_push', '%op: Salesforce object %id',
        array('%id' => $result->id, '%op' => $op)
      );
    }
    else {
      foreach ($result->errors as $error) {
        watchdog('salesforce_push', '%op error for Salesforce object %id. @code: @message',
          array(
            '%id' => $result->id,
            '@code' => $error->statusCode,
            '@message' => $error->message,
            '%op' => $op,
          ),
          WATCHDOG_ERROR
        );
      }
    }
  }
}

/**
 * Implements hook_salesforce_push_failure
 */
function salesforce_push_salesforce_push_failure($message, $variables = array()) {
  salesforce_set_message($message, 'error');
  if (isset($variables['exception'])) {
    watchdog_exception('salesforce_push', $variables['exception'], $message);
  }
}